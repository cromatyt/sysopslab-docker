version: "3.9"

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command: 
      # Disable Anonymous usage
      - "--global.sendAnonymousUsage=false"
      # Healthcheck
      - "--ping=true"
      # Setup Promethus metrics
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Log config
      - "--accesslog=true"
      - "--log.filePath=/dev/stdout"
      - "--log.format=json"
      - "--log.level=WARN" #DEBUG,PANIC,FATAL,ERROR,WARN,INFO
      # Traefik entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.ssh.address=:2222"
      - "--entrypoints.prometheus.address=:9090"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.loki.address=:3100"
      - "--entrypoints.ldap.address=:3893"
      - "--entrypoints.ldaps.address=:3894"
      - "--entrypoints.fluentbit.address=:24224"
      - "--entrypoints.opensearch.address=:9200"
      - "--entrypoints.zabbixpassive.address=:10050"
      - "--entrypoints.zabbixactive.address=:10051"
      # Enable insecure access
      - "--api.insecure=true"
      # Setup provider
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
    ports:
      # Ports exposed
      - "80:80"
      - "443:443"
      - "5432:5432"
      - "2222:2222"
      - "3893:3893"
      - "3894:3894"
      - "24224:24224"
      - "9200:9200"
      - "10050:10050"
      - "10051:10051"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Use traefik file configuration
      #- ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      # Copy user/pass file for traefik basic auth
      - ./traefik/auth.pass:/opt/traefik/auth.pass:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-ui.rule=Host(`traefik.docker.localhost`)"
      - "traefik.http.routers.traefik-ui.service=api@internal"
      - "traefik.http.routers.traefik-ui.entrypoints=web"
      - "traefik.http.middlewares.traefik-auth.basicauth.realm=test"
      - "traefik.http.middlewares.traefik-auth.basicauth.usersfile=/opt/traefik/auth.pass"
      - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"
      - "traefik.http.routers.traefik-ui.middlewares=traefik-auth"
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 3s
      retries: 1
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '64m'
    networks:
      - webgateway
      - traefik

  # For tcp check inside container network
  toolbox:
    image: nicolaka/netshoot:v0.9
    container_name: toolbox
    tty: true
    healthcheck:
      test: telnet fluentbit.docker.localhost 24224
      interval: 10s
      timeout: 3s
      retries: 1
      start_period: 5s
    networks:
      - traefik
    depends_on:
      - fluentbit
  
  # Simple test
  whoami:
    image: traefik/whoami
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
      - "traefik.port=80"
    networks:
      traefik:
        aliases:
          - "whoami.docker.localhost"
    depends_on:
      - traefik

  nginx:
    image: nginx:1.23.3
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx/headers.conf:/etc/nginx/headers.conf:ro
      - ./nginx/html:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.docker.localhost`)"
      - "traefik.http.routers.nginx.entrypoints=web,websecure"
      - "traefik.port=80,443,8081"
    logging:
      driver: fluentd
      options:
        fluentd-address: tcp://fluentbit.docker.localhost:24224
        tag: nginx-log
    networks:
      traefik:
        aliases:
          - "nginx.docker.localhost"
    depends_on:
      traefik:
        condition: service_healthy
      toolbox:
        condition: service_healthy
  
  fluentbit:
    image: fluent/fluent-bit:2.0
    container_name: fluentbit
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - ./fluentbit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./fluentbit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
    labels:
      - "traefik.enable=true"
      # routers
      - "traefik.tcp.routers.fluentbit.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.fluentbit.entryPoints=fluentbit"
      - "traefik.tcp.routers.fluentbit.service=fluentbit"
      # services (needed for TCP)
      - "traefik.tcp.services.fluentbit.loadbalancer.server.port=24224"
      - "traefik.port=24224"
    networks:
      traefik:
        aliases:
          - "fluentbit.docker.localhost"
    links:
      - opensearch
    depends_on:
      - traefik

  postgres:
    image: postgres:15.2-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=misc
      - LANG=fr_FR.utf8
    volumes:
      - ./postgres/data:/var/lib/psql/data
      - ./postgres/postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
    labels:
      - "traefik.enable=true"
      # routers
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      #- "traefik.tcp.routers.postgres.tls=true"
      #- "traefik.tcp.routers.postgresql.tls.certresolver=letsencrypt"
      - "traefik.tcp.routers.postgres.entryPoints=postgres"
      - "traefik.tcp.routers.postgres.service=postgres"
      # services (needed for TCP)
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"
    networks:
      traefik:
        aliases:
          - "postgres.docker.localhost"
    depends_on:
      - traefik

  pgadmin:
    image: dpage/pgadmin4:2023-04-04-1
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=password
      - PGADMIN_DISABLE_POSTFIX=true
    volumes:
      - ./pgadmin4/servers.json:/pgadmin4/servers.json:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.docker.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.port=80"
    networks:
      traefik:
        aliases:
          - "pgadmin.docker.localhost"
    depends_on:
      - traefik
      - postgres

  minio:
    image: minio/minio:RELEASE.2023-03-24T21-41-23Z
    container_name: minio
    command: server --console-address ":9001" /data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      #- MINIO_DOMAIN=docker.localhost
      #- MINIO_SERVER_URL=https://minio.docker.localhost
      - MINIO_BROWSER_REDIRECT_URL=http://minioadmin.docker.localhost
    labels:
      - "traefik.enable=true"
      # Console
      - "traefik.http.routers.minio-console.rule=Host(`minioadmin.docker.localhost`)"
      - "traefik.http.routers.minio-console.entrypoints=web"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      # APi
      - "traefik.http.routers.minio.rule=Host(`minio.docker.localhost`)"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"
      # Ports
      - "traefik.port=9000,9001"
    networks:
      traefik:
        aliases:
          - "minioadmin.docker.localhost"
          - "minio.docker.localhost"
    depends_on:
      - traefik

  varnish:
    image: varnish:7.3
    container_name: varnish
    environment:
      - VARNISH_SIZE=1G
    volumes:
      - ./varnish/backend_director.vcl:/etc/varnish/default.vcl:ro
    # Mount memory
    tmpfs: /var/lib/varnish/varnishd:exec
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.varnish.rule=Host(`varnish.docker.localhost`)"
      - "traefik.http.routers.varnish.entrypoints=web,websecure"
      - "traefik.http.routers.varnish.service=varnish"
      - "traefik.http.services.varnish.loadbalancer.server.port=6081"
      - "traefik.port=6081"
    networks:
      traefik:
        aliases:
          - "varnish.docker.localhost"
    depends_on:
      - traefik
      - nginx

  grafana:
    image: grafana/grafana:9.2.15
    container_name: grafana
    environment:
      - GF_DEFAULT_INSTANCE_NAME=SuperInstance
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.docker.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web,websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.port=3000"
    networks:
      traefik:
        aliases:
          - "grafana.docker.localhost"
    depends_on:
      - traefik

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    volumes:
      - ./loki/loki.yaml:/etc/loki/local-config.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`loki.docker.localhost`)"
      - "traefik.http.routers.loki.entrypoints=web,websecure"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"
      - "traefik.port=3100"
      # TCP
      - "traefik.tcp.routers.loki.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.loki.entryPoints=loki"
      - "traefik.tcp.routers.loki.service=loki"
      # services (needed for TCP)
      - "traefik.tcp.services.loki.loadbalancer.server.port=3100"
    networks:
      traefik:
        aliases:
          - "loki.docker.localhost"
    depends_on:
      - traefik
      - grafana
      - minio

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - ./loki/promtail.yaml:/etc/promtail/config.yml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.promtail.rule=Host(`promtail.docker.localhost`)"
      - "traefik.http.routers.promtail.entrypoints=web,websecure"
      - "traefik.http.services.promtail.loadbalancer.server.port=9080"
      - "traefik.port=9080"
    networks:
      traefik:
        aliases:
          - "promtail.docker.localhost"
    depends_on:
      - traefik
      - grafana
      - minio
      - loki

  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.docker.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web,websecure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.port=9090"
      # routers
      - "traefik.tcp.routers.prometheus.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.prometheus.entryPoints=prometheus"
      - "traefik.tcp.routers.prometheus.service=prometheus"
      # services (needed for TCP)
      - "traefik.tcp.services.prometheus.loadbalancer.server.port=9090"
    networks:
      traefik:
        aliases:
          - "prometheus.docker.localhost"
    depends_on:
      - traefik

  netdata:
    image: netdata/netdata:v1.38
    container_name: netdata
    # Add container capabilities
    cap_add:
      - SYS_PTRACE
    # Override the default labeling scheme
    security_opt:
      # https://docs.docker.com/engine/security/apparmor/
      - apparmor:unconfined
    volumes:
      - ./netdata/netdata.conf:/etc/netdata/netdata.conf:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netdata.rule=Host(`netdata.docker.localhost`)"
      - "traefik.http.routers.netdata.entrypoints=web,websecure"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
      - "traefik.port=19999"
    networks:
      traefik:
        aliases:
          - "netdata.docker.localhost"
    depends_on:
      - traefik

  keycloak:
    image: keycloak/keycloak:21.0
    container_name: keycloak
    environment:
      KC_DB_URL: jdbc:postgresql://postgres.docker.localhost:5432/keycloak
      KC_DB: postgres
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME: keycloak.docker.localhost
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_STRICT: 'false'
      KC_FEATURES: token-exchange
      KC_HEALTH_ENABLED: 'true'
      KC_PROXY_ADDRESS_FORWARDING: 'true'
      KC_PROXY: edge
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: 
      - start-dev
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.docker.localhost`)"
      - "traefik.http.routers.keycloak.entrypoints=web,websecure"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.port=8080"
    networks:
      traefik:
        aliases:
          - "keycloak.docker.localhost"
    depends_on:
      - traefik
      - postgres

  gitea:
    image: gitea/gitea:1.19-dev-linux-amd64-rootless
    container_name: gitea
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres.docker.localhost:5432
      - GITEA__database__SCHEMA=gitea
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea
      - GITEA__service__DISABLE_REGISTRATION=true
      #- GITRE__repository__DISABLE_HTTP_GIT=true
      - GITEA__server__HTTP_PORT=80
      #- GITEA__server__ROOT_URL=gitea.docker.localhost
      #- GITEA_server_SSH_PORT=2222
      #- GITEA_server_SSH_LISTEN_PORT=22
    volumes:
      - ./gitea/data:/data
      - ./gitea/app.ini:/data/gitea/conf/app.ini
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`gitea.docker.localhost`)"
      - "traefik.http.routers.gitea.entrypoints=web,websecure"
      - "traefik.http.routers.gitea.service=gitea"
      - "traefik.http.services.gitea.loadbalancer.server.port=80"
      # routers
      - "traefik.tcp.routers.giteassh.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.giteassh.entryPoints=ssh"
      - "traefik.tcp.routers.giteassh.service=giteassh"
      # services (needed for TCP)
      - "traefik.tcp.services.giteassh.loadbalancer.server.port=2222"
      - "traefik.port=80,2222"
    networks:
      traefik:
        aliases:
          - "gitea.docker.localhost"
    depends_on:
      - traefik
      - postgres

  drone:
    image: drone/drone:2.16.0-linux-amd64
    container_name: drone
    environment:
      - DRONE_GITEA_SERVER=http://gitea.docker.localhost:80
      - DRONE_GITEA_CLIENT_ID=07c96922-0ed1-4397-a9ea-3b6f27b332d2
      - DRONE_GITEA_CLIENT_SECRET=gto_i5x4ae5qlzffd4xwdd53hbxqxezdti2bdx6nxiieuv4yiidsqfpa
      - DRONE_RPC_SECRET=0036299f5425666b1fc8f9ccb23d74f84787662b
      - DRONE_SERVER_PROTO=http
      - DRONE_SERVER_HOST=drone.docker.localhost
      - DRONE_GITEA_SKIP_VERIFY=true
      #- DRONE_GIT_ALWAYS_AUTH=true
      #- DRONE_USER_CREATE=username:root,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc
      - DRONE_USER_CREATE=username:gitadmin,admin
    volumes:
      - ./gitea/data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.rule=Host(`drone.docker.localhost`)"
      - "traefik.http.routers.drone.entrypoints=web,websecure"
      - "traefik.http.services.drone.loadbalancer.server.port=80"
      - "traefik.port=80,443"
    networks:
      traefik:
        aliases:
          - "drone.docker.localhost"
    depends_on:
      - traefik
      - gitea

  drone-runner:
    image: drone/drone-runner-docker:1.8.3-linux-amd64
    container_name: drone-runner
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone.docker.localhost
      - DRONE_RPC_SECRET=0036299f5425666b1fc8f9ccb23d74f84787662b
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=my-first-runner
      - DRONE_UI_USERNAME=gitadmin
      - DRONE_UI_PASSWORD=gitadmin
      - DRONE_NETRC_CLONE_ONLY=true
      - DRONE_RUNNER_NETWORKS=docker_traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.runner.rule=Host(`runner.docker.localhost`)"
      - "traefik.http.routers.runner.entrypoints=web,websecure"
      - "traefik.http.services.runner.loadbalancer.server.port=3000"
      - "traefik.port=3000"
    networks:
      traefik:
        aliases:
          - "runner.docker.localhost"
    depends_on:
      - traefik
      - gitea
      - drone

  opensearch:
    image: opensearchproject/opensearch:2.6.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./opensearch/security_config.yml:/usr/share/opensearch/config/opensearch-security/config.yml:ro
      #- ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensearch.rule=Host(`opensearch.docker.localhost`)"
      - "traefik.http.routers.opensearch.entrypoints=opensearch"
      - "traefik.http.services.opensearch.loadbalancer.server.port=9200"
      # TCP
      - "traefik.tcp.routers.opensearch.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.opensearch.entryPoints=opensearch"
      - "traefik.tcp.routers.opensearch.service=opensearch"
      # services (needed for TCP)
      - "traefik.tcp.services.opensearch.loadbalancer.server.port=9200"
      - "traefik.port=9200,9600"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    networks:
      traefik:
        aliases:
          - "opensearch.docker.localhost"
    depends_on:
      - traefik

  opensearch-dash:
    image: opensearchproject/opensearch-dashboards:2.6.0
    container_name: opensearch-dash
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch.docker.localhost:9200"]'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.opensearch-dash.rule=Host(`opensearchdash.docker.localhost`)"
      - "traefik.http.routers.opensearch-dash.entrypoints=web,websecure"
      - "traefik.http.services.opensearch-dash.loadbalancer.server.port=5601"
      - "traefik.port=5601"
    networks:
      traefik:
        aliases:
          - "opensearchdash.docker.localhost"
    depends_on:
      - traefik
      - opensearch

  glauth:
    image: glauth/glauth:v2.2.0-RC1
    container_name: glauth
    volumes:
      - ./glauth/glauth.conf:/app/config/config.cfg:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glauth.rule=Host(`glauth.docker.localhost`)"
      - "traefik.http.routers.glauth.entrypoints=web,websecure"
      - "traefik.http.services.glauth.loadbalancer.server.port=5555"
      # routers
      - "traefik.tcp.routers.ldap.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.ldap.entryPoints=ldap"
      - "traefik.tcp.routers.ldap.service=ldap"
      # services (needed for TCP)
      - "traefik.tcp.services.ldap.loadbalancer.server.port=3893"
      # routers
      - "traefik.tcp.routers.ldaps.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.ldaps.entryPoints=ldaps"
      - "traefik.tcp.routers.ldaps.service=ldaps"
      # services (needed for TCP)
      - "traefik.tcp.services.ldaps.loadbalancer.server.port=3894"
      - "traefik.port=3893,3894,5555"
    networks:
      traefik:
        aliases:
          - "glauth.docker.localhost"
    depends_on:
      - traefik

  vault:
    image: vault:1.13.1
    container_name: vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault.docker.localhost:8200
      - VAULT_DEV_ROOT_TOKEN_ID=password
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.docker.localhost`)"
      - "traefik.http.routers.vault.entrypoints=web,websecure"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"
      - "traefik.port=8200"
    networks:
      traefik:
        aliases:
          - "vault.docker.localhost"
    depends_on:
      - traefik

  redis:
    image: redis:7.2-rc1-alpine3.17
    container_name: redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis.rule=Host(`redis.docker.localhost`)"
      - "traefik.http.routers.redis.entrypoints=web,websecure"
      - "traefik.http.services.redis.loadbalancer.server.port=6379"
      - "traefik.port=6379,8001"
    networks:
      traefik:
        aliases:
          - "redis.docker.localhost"
    depends_on:
      - traefik

  zabbixsrv:
    image: zabbix/zabbix-server-pgsql:ubuntu-6.4-latest
    container_name: zabbixsrv
    environment:
      - DB_SERVER_HOST=postgres.docker.localhost
      - DB_SERVER_PORT=5432
      - DB_SERVER_SCHEMA=zabbix
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix
      #- POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
      #- POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro 
      #- ./zabbix/.postgres_user:/run/secrets/POSTGRES_USER:ro
      #- ./zabbix/.postgres_pwd:/run/secrets/POSTGRES_PASSWORD:ro
    labels:
      - "traefik.enable=true"
      # TCP zabbix agent passive
      - "traefik.tcp.routers.zabbixpassive.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.zabbixpassive.entrypoints=zabbixpassive"
      - "traefik.tcp.routers.zabbixpassive.service=zabbixpassive"
      - "traefik.tcp.services.zabbixpassive.loadbalancer.server.port=10050"
      # TCP zabbix agent active
      - "traefik.tcp.routers.zabbixactive.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.zabbixactive.entrypoints=zabbixactive"
      - "traefik.tcp.routers.zabbixactive.service=zabbixactive"
      - "traefik.tcp.services.zabbixactive.loadbalancer.server.port=10051"
      - "traefik.port=10050,10051"
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '1G'
    networks:
      traefik:
        aliases:
          - "zabbixsrv.docker.localhost"
    depends_on:
      - traefik
      - postgres

  zabbixweb:
    image: zabbix/zabbix-web-nginx-pgsql:ubuntu-6.4-latest
    container_name: zabbixweb
    environment:
      - DB_SERVER_HOST=postgres.docker.localhost
      - DB_SERVER_PORT=5432
      - DB_SERVER_SCHEMA=zabbix
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=zabbix
      - ZBX_SERVER_HOST=zabbixsrv.docker.localhost
      #- POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
      #- POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro 
      #- ./zabbix/.postgres_user:/run/secrets/POSTGRES_USER:ro
      #- ./zabbix/.postgres_pwd:/run/secrets/POSTGRES_PASSWORD:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zabbixweb.rule=Host(`zabbixweb.docker.localhost`)"
      - "traefik.http.routers.zabbixweb.entrypoints=web,websecure"
      - "traefik.http.services.zabbixweb.loadbalancer.server.port=8080"
      - "traefik.port=8080,8443"
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
    networks:
      traefik:
        aliases:
          - "zabbixweb.docker.localhost"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://zabbixweb.docker.localhost:8080/ping"]
      interval: 10s
      timeout: 3s
      retries: 1
      start_period: 5s
    depends_on:
      - traefik
      - postgres
      - zabbixsrv

networks:
  webgateway:
    ipam:
      config:
        - subnet: "10.124.0.0/16"

  traefik:
    ipam:
      config:
        - subnet: "10.125.0.0/16"
